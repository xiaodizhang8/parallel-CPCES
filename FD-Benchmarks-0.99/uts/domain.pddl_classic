(define (domain uts)
    (:types  object - null node - object inter - object)
    (:predicates (true) (visited ?x - node ?int - inter)(edge ?x - node ?y - node ?int - inter)(located ?x - node ?int - inter)(started  ?int - inter)(valid ?int - inter))
    (:action starting
        :parameters (?x - node )
        :effect (and
            (forall (?int - inter) (when ( located ?x ?int) (and ( started  ?int) ( visited ?x ?int) ) ))
        )
    )
    (:action travel
        :parameters (?x - node ?y - node )
        :effect (and
            (forall (?int - inter) (when (and ( located ?x ?int) ( edge ?x ?y ?int) ) (and ( visited ?y ?int) ( located ?y ?int) (not (located ?x ?int)) ) ))
            (when(and (not (and ( started  int2) ))) (not (valid int2)))
            (when(and (not (and ( started  int3) ))) (not (valid int3)))
            (when(and (not (and ( started  int1) ))) (not (valid int1)))
            (when(and (not (and ( started  int4) ))) (not (valid int4)))
            (when(and (not (and ( started  int5) ))) (not (valid int5)))
            (when(and (not (and ( started  int7) ))) (not (valid int7)))
            (when(and (not (and ( started  int0) ))) (not (valid int0)))
            (when(and (not (and ( started  int12) ))) (not (valid int12)))
            (when(and (not (and ( started  int6) ))) (not (valid int6)))
            (when(and (not (and ( started  int13) ))) (not (valid int13)))
            (when(and (not (and ( started  int11) ))) (not (valid int11)))
            (when(and (not (and ( started  int8) ))) (not (valid int8)))
            (when(and (not (and ( started  int10) ))) (not (valid int10)))
            (when(and (not (and ( started  int9) ))) (not (valid int9)))
        )
    )
)