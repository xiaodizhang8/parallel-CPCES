(define (domain look-grab)
    (:types  object - null object - object position - object inter - object)
    (:predicates (true) (adj ?i - position ?j - position)(located ?i - position)(holding ?o - object ?int - inter)(obj-at ?o - object ?i - position ?int - inter)(handempty  ?int - inter)(valid ?int - inter))
    (:action move
        :parameters (?i - position ?j - position )
        :effect (and
            (not (located ?i)) 
            (located ?j) 
            (forall (?int - inter)(when(and (not (and (adj ?i ?j) (located ?i) ) )) (not (valid ?int))))
        )
    )
    (:action pickup-1-1-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-2 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p1-1) )) (not (valid ?int))))
        )
    )
    (:action pickup-1-2-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-3 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p1-2) )) (not (valid ?int))))
        )
    )
    (:action pickup-1-3-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-4 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p1-3) )) (not (valid ?int))))
        )
    )
    (:action pickup-1-4-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-5 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p1-4) )) (not (valid ?int))))
        )
    )
    (:action pickup-1-5-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-6 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p1-5) )) (not (valid ?int))))
        )
    )
    (:action pickup-1-6-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-7 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p1-6) )) (not (valid ?int))))
        )
    )
    (:action pickup-1-7-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-8 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p1-7) )) (not (valid ?int))))
        )
    )
    (:action pickup-1-8-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-8 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p1-8) )) (not (valid ?int))))
        )
    )
    (:action pickup-2-1-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-2 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p2-1) )) (not (valid ?int))))
        )
    )
    (:action pickup-2-2-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-3 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p2-2) )) (not (valid ?int))))
        )
    )
    (:action pickup-2-3-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-4 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p2-3) )) (not (valid ?int))))
        )
    )
    (:action pickup-2-4-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-5 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p2-4) )) (not (valid ?int))))
        )
    )
    (:action pickup-2-5-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-6 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p2-5) )) (not (valid ?int))))
        )
    )
    (:action pickup-2-6-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-7 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p2-6) )) (not (valid ?int))))
        )
    )
    (:action pickup-2-7-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-8 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p2-7) )) (not (valid ?int))))
        )
    )
    (:action pickup-2-8-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p1-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p1-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-8 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p2-8) )) (not (valid ?int))))
        )
    )
    (:action pickup-3-1-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-2 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p3-1) )) (not (valid ?int))))
        )
    )
    (:action pickup-3-2-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-3 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p3-2) )) (not (valid ?int))))
        )
    )
    (:action pickup-3-3-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-4 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p3-3) )) (not (valid ?int))))
        )
    )
    (:action pickup-3-4-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-5 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p3-4) )) (not (valid ?int))))
        )
    )
    (:action pickup-3-5-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-6 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p3-5) )) (not (valid ?int))))
        )
    )
    (:action pickup-3-6-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-7 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p3-6) )) (not (valid ?int))))
        )
    )
    (:action pickup-3-7-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-8 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p3-7) )) (not (valid ?int))))
        )
    )
    (:action pickup-3-8-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p2-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p2-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-8 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p3-8) )) (not (valid ?int))))
        )
    )
    (:action pickup-4-1-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-2 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p4-1) )) (not (valid ?int))))
        )
    )
    (:action pickup-4-2-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-3 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p4-2) )) (not (valid ?int))))
        )
    )
    (:action pickup-4-3-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-4 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p4-3) )) (not (valid ?int))))
        )
    )
    (:action pickup-4-4-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-5 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p4-4) )) (not (valid ?int))))
        )
    )
    (:action pickup-4-5-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-6 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p4-5) )) (not (valid ?int))))
        )
    )
    (:action pickup-4-6-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-7 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p4-6) )) (not (valid ?int))))
        )
    )
    (:action pickup-4-7-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-8 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p4-7) )) (not (valid ?int))))
        )
    )
    (:action pickup-4-8-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p3-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p3-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-8 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p4-8) )) (not (valid ?int))))
        )
    )
    (:action pickup-5-1-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-2 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p5-1) )) (not (valid ?int))))
        )
    )
    (:action pickup-5-2-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-3 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p5-2) )) (not (valid ?int))))
        )
    )
    (:action pickup-5-3-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-4 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p5-3) )) (not (valid ?int))))
        )
    )
    (:action pickup-5-4-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-5 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p5-4) )) (not (valid ?int))))
        )
    )
    (:action pickup-5-5-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-6 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p5-5) )) (not (valid ?int))))
        )
    )
    (:action pickup-5-6-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-7 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p5-6) )) (not (valid ?int))))
        )
    )
    (:action pickup-5-7-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-8 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p5-7) )) (not (valid ?int))))
        )
    )
    (:action pickup-5-8-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p4-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p4-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-8 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p5-8) )) (not (valid ?int))))
        )
    )
    (:action pickup-6-1-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-2 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p6-1) )) (not (valid ?int))))
        )
    )
    (:action pickup-6-2-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-3 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p6-2) )) (not (valid ?int))))
        )
    )
    (:action pickup-6-3-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-4 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p6-3) )) (not (valid ?int))))
        )
    )
    (:action pickup-6-4-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-5 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p6-4) )) (not (valid ?int))))
        )
    )
    (:action pickup-6-5-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-6 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p6-5) )) (not (valid ?int))))
        )
    )
    (:action pickup-6-6-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-7 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p6-6) )) (not (valid ?int))))
        )
    )
    (:action pickup-6-7-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-8 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p6-7) )) (not (valid ?int))))
        )
    )
    (:action pickup-6-8-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p5-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p5-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-8 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p6-8) )) (not (valid ?int))))
        )
    )
    (:action pickup-7-1-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-2 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p7-1) )) (not (valid ?int))))
        )
    )
    (:action pickup-7-2-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-3 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p7-2) )) (not (valid ?int))))
        )
    )
    (:action pickup-7-3-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-4 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p7-3) )) (not (valid ?int))))
        )
    )
    (:action pickup-7-4-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-5 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p7-4) )) (not (valid ?int))))
        )
    )
    (:action pickup-7-5-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-6 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p7-5) )) (not (valid ?int))))
        )
    )
    (:action pickup-7-6-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-7 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p7-6) )) (not (valid ?int))))
        )
    )
    (:action pickup-7-7-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-8 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p7-7) )) (not (valid ?int))))
        )
    )
    (:action pickup-7-8-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p6-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p6-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-8 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p7-8) )) (not (valid ?int))))
        )
    )
    (:action pickup-8-1-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-2 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p8-1) )) (not (valid ?int))))
        )
    )
    (:action pickup-8-2-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-1 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-3 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p8-2) )) (not (valid ?int))))
        )
    )
    (:action pickup-8-3-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-2 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-2 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-4 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p8-3) )) (not (valid ?int))))
        )
    )
    (:action pickup-8-4-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-3 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-3 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-5 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p8-4) )) (not (valid ?int))))
        )
    )
    (:action pickup-8-5-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-4 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-4 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-6 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p8-5) )) (not (valid ?int))))
        )
    )
    (:action pickup-8-6-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-5 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-5 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-7 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p8-6) )) (not (valid ?int))))
        )
    )
    (:action pickup-8-7-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-6 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-6 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-8 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p8-7) )) (not (valid ?int))))
        )
    )
    (:action pickup-8-8-look-1
        :parameters ()
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p7-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p7-8 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-7 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-7 ?int)) ) ))
            (forall (?int - inter) (when (and ( handempty  ?int) ( obj-at o1 p8-8 ?int) ) (and (not (handempty  ?int)) ( holding o1 ?int) (not (obj-at o1 p8-8 ?int)) ) ))
            (forall (?int - inter)(when(and (not (located p8-8) )) (not (valid ?int))))
        )
    )
    (:action putdown
        :parameters (?p - position )
        :effect (and
            (forall (?int - inter) (when ( holding o1 ?int) (and ( handempty  ?int) (not (holding o1 ?int)) ( obj-at o1 ?p ?int) ) ))
            (forall (?int - inter)(when(and (not (located ?p) )) (not (valid ?int))))
        )
    )
)